//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17020
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace WPNotificationClient.Services {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Toast", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public partial class Toast : object, System.ComponentModel.INotifyPropertyChanged {
        
        private WPNotificationClient.Services.ToastBackingInterval BackingIntervalField;
        
        private string ParamField;
        
        private string Text1Field;
        
        private string Text2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPNotificationClient.Services.ToastBackingInterval BackingInterval {
            get {
                return this.BackingIntervalField;
            }
            set {
                if ((this.BackingIntervalField.Equals(value) != true)) {
                    this.BackingIntervalField = value;
                    this.RaisePropertyChanged("BackingInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Param {
            get {
                return this.ParamField;
            }
            set {
                if ((object.ReferenceEquals(this.ParamField, value) != true)) {
                    this.ParamField = value;
                    this.RaisePropertyChanged("Param");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text1 {
            get {
                return this.Text1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Text1Field, value) != true)) {
                    this.Text1Field = value;
                    this.RaisePropertyChanged("Text1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text2 {
            get {
                return this.Text2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Text2Field, value) != true)) {
                    this.Text2Field = value;
                    this.RaisePropertyChanged("Text2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ToastBackingInterval", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public enum ToastBackingInterval : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImmediateDelivery = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeliveredWithin450Seconds = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeliveredWithin900Seconds = 22,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotificationResponse", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public partial class NotificationResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private WPNotificationClient.Services.DeviceConnectionStatus DeviceConnectionStatusField;
        
        private System.Net.HttpStatusCode HttpStatusCodeField;
        
        private WPNotificationClient.Services.NotificationStatus NotificationStatusField;
        
        private WPNotificationClient.Services.SubscriptionStatus SubscriptionStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPNotificationClient.Services.DeviceConnectionStatus DeviceConnectionStatus {
            get {
                return this.DeviceConnectionStatusField;
            }
            set {
                if ((this.DeviceConnectionStatusField.Equals(value) != true)) {
                    this.DeviceConnectionStatusField = value;
                    this.RaisePropertyChanged("DeviceConnectionStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.HttpStatusCode HttpStatusCode {
            get {
                return this.HttpStatusCodeField;
            }
            set {
                if ((this.HttpStatusCodeField.Equals(value) != true)) {
                    this.HttpStatusCodeField = value;
                    this.RaisePropertyChanged("HttpStatusCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPNotificationClient.Services.NotificationStatus NotificationStatus {
            get {
                return this.NotificationStatusField;
            }
            set {
                if ((this.NotificationStatusField.Equals(value) != true)) {
                    this.NotificationStatusField = value;
                    this.RaisePropertyChanged("NotificationStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPNotificationClient.Services.SubscriptionStatus SubscriptionStatus {
            get {
                return this.SubscriptionStatusField;
            }
            set {
                if ((this.SubscriptionStatusField.Equals(value) != true)) {
                    this.SubscriptionStatusField = value;
                    this.RaisePropertyChanged("SubscriptionStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceConnectionStatus", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public enum DeviceConnectionStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Connected = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TemporarilyDisconnected = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Inactive = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotificationStatus", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public enum NotificationStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Received = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueueFull = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Suppressed = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dropped = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubscriptionStatus", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public enum SubscriptionStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Expired = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Title", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public partial class Title : object, System.ComponentModel.INotifyPropertyChanged {
        
        private WPNotificationClient.Services.TitleBackingInterval BackingIntervalField;
        
        private WPNotificationClient.Services.TitleItem Title1Field;
        
        private WPNotificationClient.Services.TitleItem Title2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPNotificationClient.Services.TitleBackingInterval BackingInterval {
            get {
                return this.BackingIntervalField;
            }
            set {
                if ((this.BackingIntervalField.Equals(value) != true)) {
                    this.BackingIntervalField = value;
                    this.RaisePropertyChanged("BackingInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPNotificationClient.Services.TitleItem Title1 {
            get {
                return this.Title1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Title1Field, value) != true)) {
                    this.Title1Field = value;
                    this.RaisePropertyChanged("Title1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPNotificationClient.Services.TitleItem Title2 {
            get {
                return this.Title2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Title2Field, value) != true)) {
                    this.Title2Field = value;
                    this.RaisePropertyChanged("Title2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TitleItem", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public partial class TitleItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string BackgroundImagePathField;
        
        private string CountField;
        
        private string TitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BackgroundImagePath {
            get {
                return this.BackgroundImagePathField;
            }
            set {
                if ((object.ReferenceEquals(this.BackgroundImagePathField, value) != true)) {
                    this.BackgroundImagePathField = value;
                    this.RaisePropertyChanged("BackgroundImagePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Count {
            get {
                return this.CountField;
            }
            set {
                if ((object.ReferenceEquals(this.CountField, value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TitleBackingInterval", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public enum TitleBackingInterval : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImmediateDelivery = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeliveredWithin450Seconds = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeliveredWithin900Seconds = 12,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Raw", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public partial class Raw : object, System.ComponentModel.INotifyPropertyChanged {
        
        private WPNotificationClient.Services.RawBackingInterval BackingIntervalField;
        
        private string Text1Field;
        
        private string Text2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPNotificationClient.Services.RawBackingInterval BackingInterval {
            get {
                return this.BackingIntervalField;
            }
            set {
                if ((this.BackingIntervalField.Equals(value) != true)) {
                    this.BackingIntervalField = value;
                    this.RaisePropertyChanged("BackingInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text1 {
            get {
                return this.Text1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Text1Field, value) != true)) {
                    this.Text1Field = value;
                    this.RaisePropertyChanged("Text1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text2 {
            get {
                return this.Text2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Text2Field, value) != true)) {
                    this.Text2Field = value;
                    this.RaisePropertyChanged("Text2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RawBackingInterval", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public enum RawBackingInterval : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImmediateDelivery = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeliveredWithin450Seconds = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeliveredWithin900Seconds = 23,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.INotificationService")]
    public interface INotificationService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/SendToast", ReplyAction="http://tempuri.org/INotificationService/SendToastResponse")]
        System.IAsyncResult BeginSendToast(WPNotificationClient.Services.Toast toast, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> EndSendToast(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/SendTitle", ReplyAction="http://tempuri.org/INotificationService/SendTitleResponse")]
        System.IAsyncResult BeginSendTitle(WPNotificationClient.Services.Title title, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> EndSendTitle(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/SendRaw", ReplyAction="http://tempuri.org/INotificationService/SendRawResponse")]
        System.IAsyncResult BeginSendRaw(WPNotificationClient.Services.Raw raw, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> EndSendRaw(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INotificationService/Subscribe", ReplyAction="http://tempuri.org/INotificationService/SubscribeResponse")]
        System.IAsyncResult BeginSubscribe(System.Guid id, string uri, System.AsyncCallback callback, object asyncState);
        
        void EndSubscribe(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationServiceChannel : WPNotificationClient.Services.INotificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendToastCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendToastCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendTitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendTitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendRawCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendRawCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationServiceClient : System.ServiceModel.ClientBase<WPNotificationClient.Services.INotificationService>, WPNotificationClient.Services.INotificationService {
        
        private BeginOperationDelegate onBeginSendToastDelegate;
        
        private EndOperationDelegate onEndSendToastDelegate;
        
        private System.Threading.SendOrPostCallback onSendToastCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendTitleDelegate;
        
        private EndOperationDelegate onEndSendTitleDelegate;
        
        private System.Threading.SendOrPostCallback onSendTitleCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendRawDelegate;
        
        private EndOperationDelegate onEndSendRawDelegate;
        
        private System.Threading.SendOrPostCallback onSendRawCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscribeDelegate;
        
        private EndOperationDelegate onEndSubscribeDelegate;
        
        private System.Threading.SendOrPostCallback onSubscribeCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public NotificationServiceClient() {
        }
        
        public NotificationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<SendToastCompletedEventArgs> SendToastCompleted;
        
        public event System.EventHandler<SendTitleCompletedEventArgs> SendTitleCompleted;
        
        public event System.EventHandler<SendRawCompletedEventArgs> SendRawCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SubscribeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WPNotificationClient.Services.INotificationService.BeginSendToast(WPNotificationClient.Services.Toast toast, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendToast(toast, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> WPNotificationClient.Services.INotificationService.EndSendToast(System.IAsyncResult result) {
            return base.Channel.EndSendToast(result);
        }
        
        private System.IAsyncResult OnBeginSendToast(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WPNotificationClient.Services.Toast toast = ((WPNotificationClient.Services.Toast)(inValues[0]));
            return ((WPNotificationClient.Services.INotificationService)(this)).BeginSendToast(toast, callback, asyncState);
        }
        
        private object[] OnEndSendToast(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> retVal = ((WPNotificationClient.Services.INotificationService)(this)).EndSendToast(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendToastCompleted(object state) {
            if ((this.SendToastCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendToastCompleted(this, new SendToastCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendToastAsync(WPNotificationClient.Services.Toast toast) {
            this.SendToastAsync(toast, null);
        }
        
        public void SendToastAsync(WPNotificationClient.Services.Toast toast, object userState) {
            if ((this.onBeginSendToastDelegate == null)) {
                this.onBeginSendToastDelegate = new BeginOperationDelegate(this.OnBeginSendToast);
            }
            if ((this.onEndSendToastDelegate == null)) {
                this.onEndSendToastDelegate = new EndOperationDelegate(this.OnEndSendToast);
            }
            if ((this.onSendToastCompletedDelegate == null)) {
                this.onSendToastCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendToastCompleted);
            }
            base.InvokeAsync(this.onBeginSendToastDelegate, new object[] {
                        toast}, this.onEndSendToastDelegate, this.onSendToastCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WPNotificationClient.Services.INotificationService.BeginSendTitle(WPNotificationClient.Services.Title title, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendTitle(title, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> WPNotificationClient.Services.INotificationService.EndSendTitle(System.IAsyncResult result) {
            return base.Channel.EndSendTitle(result);
        }
        
        private System.IAsyncResult OnBeginSendTitle(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WPNotificationClient.Services.Title title = ((WPNotificationClient.Services.Title)(inValues[0]));
            return ((WPNotificationClient.Services.INotificationService)(this)).BeginSendTitle(title, callback, asyncState);
        }
        
        private object[] OnEndSendTitle(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> retVal = ((WPNotificationClient.Services.INotificationService)(this)).EndSendTitle(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendTitleCompleted(object state) {
            if ((this.SendTitleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendTitleCompleted(this, new SendTitleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendTitleAsync(WPNotificationClient.Services.Title title) {
            this.SendTitleAsync(title, null);
        }
        
        public void SendTitleAsync(WPNotificationClient.Services.Title title, object userState) {
            if ((this.onBeginSendTitleDelegate == null)) {
                this.onBeginSendTitleDelegate = new BeginOperationDelegate(this.OnBeginSendTitle);
            }
            if ((this.onEndSendTitleDelegate == null)) {
                this.onEndSendTitleDelegate = new EndOperationDelegate(this.OnEndSendTitle);
            }
            if ((this.onSendTitleCompletedDelegate == null)) {
                this.onSendTitleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendTitleCompleted);
            }
            base.InvokeAsync(this.onBeginSendTitleDelegate, new object[] {
                        title}, this.onEndSendTitleDelegate, this.onSendTitleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WPNotificationClient.Services.INotificationService.BeginSendRaw(WPNotificationClient.Services.Raw raw, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendRaw(raw, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> WPNotificationClient.Services.INotificationService.EndSendRaw(System.IAsyncResult result) {
            return base.Channel.EndSendRaw(result);
        }
        
        private System.IAsyncResult OnBeginSendRaw(object[] inValues, System.AsyncCallback callback, object asyncState) {
            WPNotificationClient.Services.Raw raw = ((WPNotificationClient.Services.Raw)(inValues[0]));
            return ((WPNotificationClient.Services.INotificationService)(this)).BeginSendRaw(raw, callback, asyncState);
        }
        
        private object[] OnEndSendRaw(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> retVal = ((WPNotificationClient.Services.INotificationService)(this)).EndSendRaw(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendRawCompleted(object state) {
            if ((this.SendRawCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendRawCompleted(this, new SendRawCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendRawAsync(WPNotificationClient.Services.Raw raw) {
            this.SendRawAsync(raw, null);
        }
        
        public void SendRawAsync(WPNotificationClient.Services.Raw raw, object userState) {
            if ((this.onBeginSendRawDelegate == null)) {
                this.onBeginSendRawDelegate = new BeginOperationDelegate(this.OnBeginSendRaw);
            }
            if ((this.onEndSendRawDelegate == null)) {
                this.onEndSendRawDelegate = new EndOperationDelegate(this.OnEndSendRaw);
            }
            if ((this.onSendRawCompletedDelegate == null)) {
                this.onSendRawCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendRawCompleted);
            }
            base.InvokeAsync(this.onBeginSendRawDelegate, new object[] {
                        raw}, this.onEndSendRawDelegate, this.onSendRawCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WPNotificationClient.Services.INotificationService.BeginSubscribe(System.Guid id, string uri, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscribe(id, uri, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void WPNotificationClient.Services.INotificationService.EndSubscribe(System.IAsyncResult result) {
            base.Channel.EndSubscribe(result);
        }
        
        private System.IAsyncResult OnBeginSubscribe(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            string uri = ((string)(inValues[1]));
            return ((WPNotificationClient.Services.INotificationService)(this)).BeginSubscribe(id, uri, callback, asyncState);
        }
        
        private object[] OnEndSubscribe(System.IAsyncResult result) {
            ((WPNotificationClient.Services.INotificationService)(this)).EndSubscribe(result);
            return null;
        }
        
        private void OnSubscribeCompleted(object state) {
            if ((this.SubscribeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscribeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscribeAsync(System.Guid id, string uri) {
            this.SubscribeAsync(id, uri, null);
        }
        
        public void SubscribeAsync(System.Guid id, string uri, object userState) {
            if ((this.onBeginSubscribeDelegate == null)) {
                this.onBeginSubscribeDelegate = new BeginOperationDelegate(this.OnBeginSubscribe);
            }
            if ((this.onEndSubscribeDelegate == null)) {
                this.onEndSubscribeDelegate = new EndOperationDelegate(this.OnEndSubscribe);
            }
            if ((this.onSubscribeCompletedDelegate == null)) {
                this.onSubscribeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscribeCompleted);
            }
            base.InvokeAsync(this.onBeginSubscribeDelegate, new object[] {
                        id,
                        uri}, this.onEndSubscribeDelegate, this.onSubscribeCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WPNotificationClient.Services.INotificationService CreateChannel() {
            return new NotificationServiceClientChannel(this);
        }
        
        private class NotificationServiceClientChannel : ChannelBase<WPNotificationClient.Services.INotificationService>, WPNotificationClient.Services.INotificationService {
            
            public NotificationServiceClientChannel(System.ServiceModel.ClientBase<WPNotificationClient.Services.INotificationService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSendToast(WPNotificationClient.Services.Toast toast, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = toast;
                System.IAsyncResult _result = base.BeginInvoke("SendToast", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> EndSendToast(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> _result = ((System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse>)(base.EndInvoke("SendToast", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendTitle(WPNotificationClient.Services.Title title, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = title;
                System.IAsyncResult _result = base.BeginInvoke("SendTitle", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> EndSendTitle(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> _result = ((System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse>)(base.EndInvoke("SendTitle", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendRaw(WPNotificationClient.Services.Raw raw, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = raw;
                System.IAsyncResult _result = base.BeginInvoke("SendRaw", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> EndSendRaw(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse> _result = ((System.Collections.ObjectModel.ObservableCollection<WPNotificationClient.Services.NotificationResponse>)(base.EndInvoke("SendRaw", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSubscribe(System.Guid id, string uri, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = id;
                _args[1] = uri;
                System.IAsyncResult _result = base.BeginInvoke("Subscribe", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSubscribe(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Subscribe", _args, result);
            }
        }
    }
}
