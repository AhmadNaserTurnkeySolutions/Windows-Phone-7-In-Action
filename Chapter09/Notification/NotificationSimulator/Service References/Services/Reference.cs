//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17020
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NotificationSimulator.Services {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Toast", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    [System.SerializableAttribute()]
    public partial class Toast : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NotificationSimulator.Services.ToastBackingInterval BackingIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Text1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Text2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NotificationSimulator.Services.ToastBackingInterval BackingInterval {
            get {
                return this.BackingIntervalField;
            }
            set {
                if ((this.BackingIntervalField.Equals(value) != true)) {
                    this.BackingIntervalField = value;
                    this.RaisePropertyChanged("BackingInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Param {
            get {
                return this.ParamField;
            }
            set {
                if ((object.ReferenceEquals(this.ParamField, value) != true)) {
                    this.ParamField = value;
                    this.RaisePropertyChanged("Param");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text1 {
            get {
                return this.Text1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Text1Field, value) != true)) {
                    this.Text1Field = value;
                    this.RaisePropertyChanged("Text1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text2 {
            get {
                return this.Text2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Text2Field, value) != true)) {
                    this.Text2Field = value;
                    this.RaisePropertyChanged("Text2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ToastBackingInterval", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public enum ToastBackingInterval : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImmediateDelivery = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeliveredWithin450Seconds = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeliveredWithin900Seconds = 22,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotificationResponse", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    [System.SerializableAttribute()]
    public partial class NotificationResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NotificationSimulator.Services.DeviceConnectionStatus DeviceConnectionStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.HttpStatusCode HttpStatusCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NotificationSimulator.Services.NotificationStatus NotificationStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NotificationSimulator.Services.SubscriptionStatus SubscriptionStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NotificationSimulator.Services.DeviceConnectionStatus DeviceConnectionStatus {
            get {
                return this.DeviceConnectionStatusField;
            }
            set {
                if ((this.DeviceConnectionStatusField.Equals(value) != true)) {
                    this.DeviceConnectionStatusField = value;
                    this.RaisePropertyChanged("DeviceConnectionStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.HttpStatusCode HttpStatusCode {
            get {
                return this.HttpStatusCodeField;
            }
            set {
                if ((this.HttpStatusCodeField.Equals(value) != true)) {
                    this.HttpStatusCodeField = value;
                    this.RaisePropertyChanged("HttpStatusCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NotificationSimulator.Services.NotificationStatus NotificationStatus {
            get {
                return this.NotificationStatusField;
            }
            set {
                if ((this.NotificationStatusField.Equals(value) != true)) {
                    this.NotificationStatusField = value;
                    this.RaisePropertyChanged("NotificationStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NotificationSimulator.Services.SubscriptionStatus SubscriptionStatus {
            get {
                return this.SubscriptionStatusField;
            }
            set {
                if ((this.SubscriptionStatusField.Equals(value) != true)) {
                    this.SubscriptionStatusField = value;
                    this.RaisePropertyChanged("SubscriptionStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceConnectionStatus", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public enum DeviceConnectionStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Connected = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TemporarilyDisconnected = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Inactive = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotificationStatus", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public enum NotificationStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Received = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        QueueFull = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Suppressed = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dropped = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubscriptionStatus", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public enum SubscriptionStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Expired = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Title", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    [System.SerializableAttribute()]
    public partial class Title : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NotificationSimulator.Services.TitleBackingInterval BackingIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NotificationSimulator.Services.TitleItem Title1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NotificationSimulator.Services.TitleItem Title2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NotificationSimulator.Services.TitleBackingInterval BackingInterval {
            get {
                return this.BackingIntervalField;
            }
            set {
                if ((this.BackingIntervalField.Equals(value) != true)) {
                    this.BackingIntervalField = value;
                    this.RaisePropertyChanged("BackingInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NotificationSimulator.Services.TitleItem Title1 {
            get {
                return this.Title1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Title1Field, value) != true)) {
                    this.Title1Field = value;
                    this.RaisePropertyChanged("Title1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NotificationSimulator.Services.TitleItem Title2 {
            get {
                return this.Title2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Title2Field, value) != true)) {
                    this.Title2Field = value;
                    this.RaisePropertyChanged("Title2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TitleItem", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    [System.SerializableAttribute()]
    public partial class TitleItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BackgroundImagePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BackgroundImagePath {
            get {
                return this.BackgroundImagePathField;
            }
            set {
                if ((object.ReferenceEquals(this.BackgroundImagePathField, value) != true)) {
                    this.BackgroundImagePathField = value;
                    this.RaisePropertyChanged("BackgroundImagePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Count {
            get {
                return this.CountField;
            }
            set {
                if ((object.ReferenceEquals(this.CountField, value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TitleBackingInterval", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public enum TitleBackingInterval : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImmediateDelivery = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeliveredWithin450Seconds = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeliveredWithin900Seconds = 12,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Raw", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    [System.SerializableAttribute()]
    public partial class Raw : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NotificationSimulator.Services.RawBackingInterval BackingIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Text1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Text2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NotificationSimulator.Services.RawBackingInterval BackingInterval {
            get {
                return this.BackingIntervalField;
            }
            set {
                if ((this.BackingIntervalField.Equals(value) != true)) {
                    this.BackingIntervalField = value;
                    this.RaisePropertyChanged("BackingInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text1 {
            get {
                return this.Text1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Text1Field, value) != true)) {
                    this.Text1Field = value;
                    this.RaisePropertyChanged("Text1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text2 {
            get {
                return this.Text2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Text2Field, value) != true)) {
                    this.Text2Field = value;
                    this.RaisePropertyChanged("Text2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RawBackingInterval", Namespace="http://schemas.datacontract.org/2004/07/WpNotificationService")]
    public enum RawBackingInterval : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImmediateDelivery = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeliveredWithin450Seconds = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeliveredWithin900Seconds = 23,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.INotificationService")]
    public interface INotificationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/SendToast", ReplyAction="http://tempuri.org/INotificationService/SendToastResponse")]
        NotificationSimulator.Services.NotificationResponse[] SendToast(NotificationSimulator.Services.Toast toast);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/SendTitle", ReplyAction="http://tempuri.org/INotificationService/SendTitleResponse")]
        NotificationSimulator.Services.NotificationResponse[] SendTitle(NotificationSimulator.Services.Title title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/SendRaw", ReplyAction="http://tempuri.org/INotificationService/SendRawResponse")]
        NotificationSimulator.Services.NotificationResponse[] SendRaw(NotificationSimulator.Services.Raw raw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/Subscribe", ReplyAction="http://tempuri.org/INotificationService/SubscribeResponse")]
        void Subscribe(System.Guid id, string uri);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationServiceChannel : NotificationSimulator.Services.INotificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationServiceClient : System.ServiceModel.ClientBase<NotificationSimulator.Services.INotificationService>, NotificationSimulator.Services.INotificationService {
        
        public NotificationServiceClient() {
        }
        
        public NotificationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public NotificationSimulator.Services.NotificationResponse[] SendToast(NotificationSimulator.Services.Toast toast) {
            return base.Channel.SendToast(toast);
        }
        
        public NotificationSimulator.Services.NotificationResponse[] SendTitle(NotificationSimulator.Services.Title title) {
            return base.Channel.SendTitle(title);
        }
        
        public NotificationSimulator.Services.NotificationResponse[] SendRaw(NotificationSimulator.Services.Raw raw) {
            return base.Channel.SendRaw(raw);
        }
        
        public void Subscribe(System.Guid id, string uri) {
            base.Channel.Subscribe(id, uri);
        }
    }
}
